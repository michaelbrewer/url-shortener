plugins {
	id("base")
	id("java")
	id("jacoco")
	id("org.jetbrains.kotlin.jvm") version "1.5.31" apply(false)
	id("org.jetbrains.kotlin.kapt") version "1.5.31" apply(false)
	id("com.github.ben-manes.versions") version "0.39.0" apply(false)
	id("io.gitlab.arturbosch.detekt") version "1.18.1" apply(false)
}

allprojects {
	apply(plugin: "jacoco")
	apply(plugin: "org.jetbrains.kotlin.jvm")
	apply(plugin: "org.jetbrains.kotlin.kapt")
	apply(plugin: "com.github.ben-manes.versions")
	apply(plugin: "io.gitlab.arturbosch.detekt")

	group = "com.brew.services"
	version = ""

	repositories {
		mavenCentral()
	}

	dependencies {
		implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
		implementation("org.jetbrains.kotlin:kotlin-reflect")

		testImplementation("org.jetbrains.kotlin:kotlin-test")
		testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
		testImplementation(platform("org.junit:junit-bom:5.8.1"))
		testImplementation("org.junit.jupiter:junit-jupiter")
		testImplementation("org.junit.jupiter:junit-jupiter-api")
		testRuntimeOnly("org.junit.jupiter:junit-jupiter-params")
		testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
		testImplementation("org.junit.platform:junit-platform-commons")
		testRuntimeOnly("org.junit.platform:junit-platform-engine")
		testImplementation("org.mockito:mockito-core:4.1.0")
	}

	test {
		useJUnitPlatform()
	}

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict -Xstring-concat=indy-with-constants"]
            jvmTarget = JavaVersion.VERSION_11.toString()
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict -Xstring-concat=indy-with-constants"]
            jvmTarget = JavaVersion.VERSION_11.toString()
        }
    }

	def isNonStable = { String version ->
		def stableKeyword = ["RELEASE", "FINAL", "GA", "JRE"].any { version.toUpperCase().contains(it) }
		def regex = /^[0-9,.v-]+(-r)?$/
		return !stableKeyword && !(version ==~ regex)
	}
	dependencyUpdates {
		rejectVersionIf {
			isNonStable(it.candidate.version)
		}
	}
}

jacoco {
    toolVersion = "0.8.7"
}

task codeCoverageReport(type: JacocoReport) {
    dependsOn(check, test, subprojects*.test)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}
codeCoverageReport.dependsOn {
	subprojects*.test
}
